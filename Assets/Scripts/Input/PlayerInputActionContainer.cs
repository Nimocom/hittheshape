//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Input/Main.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActionService: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActionService()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Main"",
    ""maps"": [
        {
            ""name"": ""MainMap"",
            ""id"": ""0551256d-4679-4141-b81d-ec882246bc19"",
            ""actions"": [
                {
                    ""name"": ""ActivateBall"",
                    ""type"": ""Button"",
                    ""id"": ""a1ab5126-a596-4335-b638-98ee3b9eb505"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SetBallStartPoint"",
                    ""type"": ""Value"",
                    ""id"": ""8938fd0f-2102-486a-9dd9-ec7ddd82c369"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c0a42882-a9cc-4027-a431-be0d2e079b30"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ActivateBall"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""516a75a6-fde7-4111-902e-820acdf3003f"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ActivateBall"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""983b3f90-6ea3-4e3a-8e28-81974af77aa3"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Mouse"",
                    ""action"": ""SetBallStartPoint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b1f80c2b-5cbd-4ead-84de-4c2643665d2b"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Touch"",
                    ""action"": ""SetBallStartPoint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Mouse"",
            ""bindingGroup"": ""Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Touch"",
            ""bindingGroup"": ""Touch"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // MainMap
        m_MainMap = asset.FindActionMap("MainMap", throwIfNotFound: true);
        m_MainMap_ActivateBall = m_MainMap.FindAction("ActivateBall", throwIfNotFound: true);
        m_MainMap_SetBallStartPoint = m_MainMap.FindAction("SetBallStartPoint", throwIfNotFound: true);
    }

    ~@PlayerInputActionService()
    {
        UnityEngine.Debug.Assert(!m_MainMap.enabled, "This will cause a leak and performance issues, PlayerInputActionService.MainMap.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MainMap
    private readonly InputActionMap m_MainMap;
    private List<IMainMapActions> m_MainMapActionsCallbackInterfaces = new List<IMainMapActions>();
    private readonly InputAction m_MainMap_ActivateBall;
    private readonly InputAction m_MainMap_SetBallStartPoint;
    public struct MainMapActions
    {
        private @PlayerInputActionService m_Wrapper;
        public MainMapActions(@PlayerInputActionService wrapper) { m_Wrapper = wrapper; }
        public InputAction @ActivateBall => m_Wrapper.m_MainMap_ActivateBall;
        public InputAction @SetBallStartPoint => m_Wrapper.m_MainMap_SetBallStartPoint;
        public InputActionMap Get() { return m_Wrapper.m_MainMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainMapActions set) { return set.Get(); }
        public void AddCallbacks(IMainMapActions instance)
        {
            if (instance == null || m_Wrapper.m_MainMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MainMapActionsCallbackInterfaces.Add(instance);
            @ActivateBall.started += instance.OnActivateBall;
            @ActivateBall.performed += instance.OnActivateBall;
            @ActivateBall.canceled += instance.OnActivateBall;
            @SetBallStartPoint.started += instance.OnSetBallStartPoint;
            @SetBallStartPoint.performed += instance.OnSetBallStartPoint;
            @SetBallStartPoint.canceled += instance.OnSetBallStartPoint;
        }

        private void UnregisterCallbacks(IMainMapActions instance)
        {
            @ActivateBall.started -= instance.OnActivateBall;
            @ActivateBall.performed -= instance.OnActivateBall;
            @ActivateBall.canceled -= instance.OnActivateBall;
            @SetBallStartPoint.started -= instance.OnSetBallStartPoint;
            @SetBallStartPoint.performed -= instance.OnSetBallStartPoint;
            @SetBallStartPoint.canceled -= instance.OnSetBallStartPoint;
        }

        public void RemoveCallbacks(IMainMapActions instance)
        {
            if (m_Wrapper.m_MainMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMainMapActions instance)
        {
            foreach (var item in m_Wrapper.m_MainMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MainMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MainMapActions @MainMap => new MainMapActions(this);
    private int m_MouseSchemeIndex = -1;
    public InputControlScheme MouseScheme
    {
        get
        {
            if (m_MouseSchemeIndex == -1) m_MouseSchemeIndex = asset.FindControlSchemeIndex("Mouse");
            return asset.controlSchemes[m_MouseSchemeIndex];
        }
    }
    private int m_TouchSchemeIndex = -1;
    public InputControlScheme TouchScheme
    {
        get
        {
            if (m_TouchSchemeIndex == -1) m_TouchSchemeIndex = asset.FindControlSchemeIndex("Touch");
            return asset.controlSchemes[m_TouchSchemeIndex];
        }
    }
    public interface IMainMapActions
    {
        void OnActivateBall(InputAction.CallbackContext context);
        void OnSetBallStartPoint(InputAction.CallbackContext context);
    }
}
